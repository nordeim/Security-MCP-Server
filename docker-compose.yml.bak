version: '3.8'

services:
  security-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: security-mcp-server
    restart: unless-stopped
    ports:
      - "8080:8080"  # MCP Server
      - "9090:9090"  # Metrics
    environment:
      # Server Configuration
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8080
      - MCP_SERVER_TRANSPORT=http
      
      # Security Configuration
      - MCP_SECURITY_MAX_ARGS_LENGTH=4096
      - MCP_SECURITY_TIMEOUT_SECONDS=600
      - MCP_SECURITY_CONCURRENCY_LIMIT=2
      
      # Circuit Breaker Configuration
      - MCP_CIRCUIT_BREAKER_FAILURE_THRESHOLD=5
      - MCP_CIRCUIT_BREAKER_RECOVERY_TIMEOUT=60.0
      
      # Metrics Configuration
      - MCP_METRICS_ENABLED=true
      - MCP_METRICS_PROMETHEUS_ENABLED=true
      - MCP_METRICS_PROMETHEUS_PORT=9090
      - MCP_METRICS_COLLECTION_INTERVAL=15.0
      
      # Logging Configuration
      - MCP_LOGGING_LEVEL=INFO
      - MCP_LOGGING_FILE_PATH=/var/log/mcp-server/server.log
      - MCP_LOGGING_MAX_FILE_SIZE=10485760
      - MCP_LOGGING_BACKUP_COUNT=5
      
      # Health Configuration
      - MCP_HEALTH_CHECK_INTERVAL=30.0
      - MCP_HEALTH_CPU_THRESHOLD=80.0
      - MCP_HEALTH_MEMORY_THRESHOLD=80.0
      - MCP_HEALTH_DISK_THRESHOLD=80.0
      - MCP_HEALTH_TIMEOUT=10.0
      
      # Tool Configuration
      - MCP_TOOL_DEFAULT_TIMEOUT=600
      - MCP_TOOL_DEFAULT_CONCURRENCY=2
    volumes:
      - ./config:/opt/mcp-server/config:ro
      - ./logs:/var/log/mcp-server
      - ./data:/var/lib/mcp-server
    networks:
      - security-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - security-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - security-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

networks:
  security-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
