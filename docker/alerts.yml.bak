groups:
  - name: general-availability
    rules:
      - alert: PrometheusTargetDown
        expr: up == 0
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "Target down: {{ $labels.job }} on {{ $labels.instance }}"
          description: "Prometheus target {{ $labels.job }} ({{ $labels.instance }}) has been down for 2 minutes."

      - alert: MCPServerDown
        expr: up{job="mcp-server"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "MCP server metrics endpoint down"
          description: "The mcp-server metrics endpoint {{ $labels.instance }} is not reachable for 1 minute."

  - name: mcp-reliability
    rules:
      - alert: MCPCircuitBreakerOpen
        # If circuit breaker state is exported as labels (recommended)
        expr: mcp_circuit_breaker_state{state="open"} == 1
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Circuit breaker OPEN for {{ $labels.tool }}"
          description: "Circuit breaker is OPEN for tool {{ $labels.tool }} for over 5 minutes. Persistent failures are blocking executions."

      - alert: MCPCircuitBreakerOpenNumeric
        # Fallback if state is exported as a numeric gauge (e.g., 0=closed,1=half_open,2=open)
        expr: mcp_circuit_breaker_state >= 2
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Circuit breaker OPEN (numeric) for {{ $labels.tool }}"
          description: "Circuit breaker metric indicates OPEN state for {{ $labels.tool }} for 5 minutes."

      - alert: MCPHealthDegraded
        # If health is exported with a status label; adjust label name/values to match implementation
        expr: mcp_health_check_status{status=~"degraded|unhealthy"} == 1
        for: 3m
        labels:
          severity: warning
        annotations:
          summary: "MCP health degraded on {{ $labels.check }}"
          description: "Health check {{ $labels.check }} reports {{ $labels.status }} for 3 minutes."

      - alert: MCPHighFailureRate
        # Failure ratio > 20% over 10m; requires success="true/false" label on counter
        expr: |
          sum by (tool)(
            rate(mcp_tool_execution_total{success="false"}[10m])
          )
          /
          sum by (tool)(
            rate(mcp_tool_execution_total[10m])
          ) > 0.2
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "High failure rate for {{ $labels.tool }}"
          description: "Failure ratio > 20% for tool {{ $labels.tool }} over the last 10m."

      - alert: MCPLatencyP95High
        # p95 execution time > 5s across all tools; tune threshold for your environment
        expr: |
          histogram_quantile(
            0.95,
            sum by (le) (rate(mcp_tool_execution_seconds_bucket[5m]))
          ) > 5
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "High MCP execution latency (p95)"
          description: "The p95 execution time across tools exceeds 5s for 10m."

  - name: node-infrastructure
    rules:
      - alert: NodeHighCPU
        expr: 1 - avg by (instance)(rate(node_cpu_seconds_total{mode="idle"}[5m])) > 0.8
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "High CPU on {{ $labels.instance }}"
          description: "CPU usage > 80% for 10 minutes."

      - alert: NodeLowMemoryAvailable
        expr: (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) < 0.2
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "Low memory available on {{ $labels.instance }}"
          description: "Available memory < 20% for 10 minutes."

  - name: container-observability
    rules:
      - alert: ContainerMemoryThrottling
        expr: |
          (container_memory_usage_bytes{container!=""} / container_spec_memory_limit_bytes{container!=""})
            > 0.9
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "High container memory usage: {{ $labels.container }}"
          description: "Container {{ $labels.container }} memory usage > 90% of limit for 10 minutes."

      - alert: MCPContainerHighCPU
        expr: |
          rate(container_cpu_usage_seconds_total{container="mcp-server"}[5m]) > 0.8
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage in mcp-server container"
          description: "mcp-server CPU usage > 80% core-seconds/s for 10 minutes. Consider resource tuning."

  - name: prometheus-self
    rules:
      - alert: PrometheusRuleEvaluationErrors
        expr: rate(prometheus_rule_evaluation_failures_total[5m]) > 0
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Prometheus rule evaluation errors"
          description: "Prometheus is encountering rule evaluation failures."
